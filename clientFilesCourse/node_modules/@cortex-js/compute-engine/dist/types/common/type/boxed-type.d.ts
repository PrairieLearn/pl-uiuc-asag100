/* 0.30.2 */import type { Type, TypeResolver, TypeString } from './types';
/** @category Type */
export declare class BoxedType {
    static unknown: BoxedType;
    static number: BoxedType;
    static non_finite_number: BoxedType;
    static finite_number: BoxedType;
    static finite_integer: BoxedType;
    static finite_real: BoxedType;
    static string: BoxedType;
    static dictionary: BoxedType;
    static setNumber: BoxedType;
    static setComplex: BoxedType;
    static setImaginary: BoxedType;
    static setReal: BoxedType;
    static setRational: BoxedType;
    static setFiniteInteger: BoxedType;
    static setInteger: BoxedType;
    type: Type;
    static widen(...types: ReadonlyArray<BoxedType | Type>): BoxedType;
    static narrow(...types: ReadonlyArray<BoxedType | Type>): BoxedType;
    constructor(type: Type | TypeString, typeResolver?: TypeResolver);
    matches(other: Type | BoxedType): boolean;
    is(other: Type): boolean;
    get isUnknown(): boolean;
    toString(): string;
    toJSON(): string;
    [Symbol.toPrimitive](hint: string): string | null;
    valueOf(): string;
}
