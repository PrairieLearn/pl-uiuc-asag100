/* 0.30.2 */import type { BoxedExpression, PatternMatchOptions, BoxedSubstitution, ComputeEngine, Metadata, SemiBoxedExpression, DictionaryInterface } from '../global-types';
import { _BoxedExpression } from './abstract-boxed-expression';
import { BoxedType } from '../../common/type/boxed-type';
import { Expression } from '../../math-json/types';
/**
 * BoxedDictionary
 *
 */
export declare class BoxedDictionary extends _BoxedExpression implements DictionaryInterface {
    [Symbol.toStringTag]: string;
    private readonly _keyValues;
    private _type;
    constructor(ce: ComputeEngine, keyValues: Record<string, SemiBoxedExpression> | BoxedExpression, options?: {
        metadata?: Metadata;
        canonical?: boolean;
    });
    private _initFromRecord;
    private _initFromExpression;
    get json(): Expression;
    get hash(): number;
    get operator(): string;
    get type(): BoxedType;
    get isPure(): boolean;
    get isCanonical(): boolean;
    set isCanonical(_va: boolean);
    get value(): BoxedExpression | undefined;
    get complexity(): number;
    get isCollection(): boolean;
    get isIndexedCollection(): boolean;
    get isLazyCollection(): boolean;
    xcontains(_rhs: BoxedExpression): boolean | undefined;
    get xsize(): number | undefined;
    get isEmptyCollection(): boolean;
    get isFiniteCollection(): boolean;
    each(): Generator<BoxedExpression>;
    get(key: string): BoxedExpression | undefined;
    has(key: string): boolean;
    get keys(): string[];
    get entries(): [string, BoxedExpression][];
    get values(): BoxedExpression[];
    match(pattern: BoxedExpression, _options?: PatternMatchOptions): BoxedSubstitution | null;
}
