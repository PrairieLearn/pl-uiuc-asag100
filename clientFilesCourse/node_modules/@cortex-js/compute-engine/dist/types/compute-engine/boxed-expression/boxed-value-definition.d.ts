/* 0.30.2 */import type { BoxedExpression, ValueDefinition, BoxedValueDefinition, CollectionHandlers, ComputeEngine } from '../global-types';
import type { Type, TypeString } from '../../common/type/types';
import { BoxedType } from '../../common/type/boxed-type';
import { ConfigurationChangeListener } from '../../common/configuration-change';
/**
 * ### THEORY OF OPERATIONS
 *
 * - The value in the definition is the initial value of the symbol when
 *   entering an evaluation context. Unless it is a constant, it is not the
 *   value of the symbol itself, which is stored in the evaluation context.
 *
 * - The value or type of a constant cannot be changed.
 *
 * - When the type is changed, the value is preserved if it is compatible
 *   with the new type, otherwise it is reset to no value.
 *
 * - When the value is changed, the type is unaffected. If the value is not
 *   compatible with the type (setting a def with a numeric type to a value
 *   of `True` for example), the value is discarded.
 *
 */
export declare class _BoxedValueDefinition implements BoxedValueDefinition, ConfigurationChangeListener {
    readonly name: string; /** Used for debugging and error messages */
    wikidata?: string;
    description?: string | string[];
    url?: string;
    private _engine;
    private _defValue?;
    private _value;
    private _type;
    inferredType: boolean;
    _isConstant: boolean;
    holdUntil: 'never' | 'evaluate' | 'N';
    eq?: (a: BoxedExpression) => boolean | undefined;
    neq?: (a: BoxedExpression) => boolean | undefined;
    cmp?: (a: BoxedExpression) => '=' | '>' | '<' | undefined;
    collection?: CollectionHandlers;
    constructor(ce: ComputeEngine, name: string, def: Partial<ValueDefinition>);
    /** For debugging */
    toJSON(): any;
    get isConstant(): boolean;
    get value(): BoxedExpression | undefined;
    get type(): BoxedType;
    set type(t: Type | TypeString | BoxedType);
    onConfigurationChange(): void;
}
