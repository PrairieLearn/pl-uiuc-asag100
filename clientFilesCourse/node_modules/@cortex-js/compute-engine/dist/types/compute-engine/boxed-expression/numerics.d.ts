/* 0.30.2 */import { Complex } from 'complex-esm';
import { Decimal } from 'decimal.js';
import type { Rational } from '../numerics/types';
import type { BoxedExpression, SemiBoxedExpression } from '../global-types';
export declare function asRational(expr: BoxedExpression): Rational | undefined;
export declare function asBigint(x: Complex | Decimal | SemiBoxedExpression | undefined): bigint | null;
export declare function asBignum(expr: BoxedExpression | undefined): Decimal | null;
/**
 * Validate if the expression is a small integer.
 * A small integer is an integer between -SMALL_INTEGER and SMALL_INTEGER (inclusive).
 * Returns null if the expression is not a small integer.
 *
 * Unlike `toInteger()` this functions fails if the expression is not an
 * integer. `toInteger()` will round the value to the nearest integer.
 */
export declare function asSmallInteger(expr: number | BoxedExpression | undefined): number | null;
/**
 * Convert a boxed expression to an integer.
 * Returns null if the expression cannot be converted to an integer.
 * If the expression is a complex number, only the real part is considered.
 * If the real part is not an integer, it is rounded to the nearest integer.
 *
 * Unlike `asSmallInteger()`, this function does not check if the integer is
 * within the range of -SMALL_INTEGER to SMALL_INTEGER, and it rounds the
 * value to the nearest integer if it is a number.
 *
 */
export declare function toInteger(expr: BoxedExpression | undefined): number | null;
/** Convert a boxed expression to a bigint.
 * Returns null if the expression cannot be converted to a bigint.
 * If the expression is a complex number, only the real part is considered.
 * If the real part is not an integer, it is rounded to the nearest integer.
 */
export declare function toBigint(expr: BoxedExpression | undefined): bigint | null;
