/* 0.30.2 */import type { BoxedExpression, OperatorDefinition, ValueDefinition, ComputeEngine, BoxedDefinition, TaggedValueDefinition, TaggedOperatorDefinition, BoxedOperatorDefinition, BoxedValueDefinition, DictionaryInterface } from '../global-types';
import { Type } from '../../common/type/types';
import { NumericValue } from '../numeric-value/types';
export declare function isDictionary(expr: any | null | undefined): expr is DictionaryInterface;
export declare function isBoxedExpression(x: unknown): x is BoxedExpression;
/**
 * For any numeric result, if `bignumPreferred()` is true, calculate using
 * bignums. If `bignumPreferred()` is false, calculate using machine numbers
 */
export declare function bignumPreferred(ce: ComputeEngine): boolean;
export declare function hashCode(s: string): number;
export declare function normalizedUnknownsForSolve(syms: string | Iterable<string> | BoxedExpression | Iterable<BoxedExpression> | null | undefined): string[];
/** Return the local variables in the expression.
 *
 * A local variable is a symbol that is declared with a `Declare`
 * expression in a `Block` expression.
 *
 */
export declare function getLocalVariables(expr: BoxedExpression): string[];
export declare function domainToType(expr: BoxedExpression): Type;
/**
 * Return the angle in the range [0, 2Ï€) that is equivalent to the given angle.
 *
 * @param x
 * @returns
 */
export declare function canonicalAngle(x: BoxedExpression | undefined): BoxedExpression | undefined;
/**
 * Return a multiple of the imaginary unit, e.g.
 * - 'ImaginaryUnit'  -> 1
 * - ['Negate', 'ImaginaryUnit']  -> -1
 * - ['Negate', ['Multiply', 3, 'ImaginaryUnit']] -> -3
 * - ['Multiply', 5, 'ImaginaryUnit'] -> 5
 * - ['Multiply', 'ImaginaryUnit', 5] -> 5
 * - ['Divide', 'ImaginaryUnit', 2] -> 0.5
 *
 */
export declare function getImaginaryFactor(expr: number | BoxedExpression): BoxedExpression | undefined;
/**
 * `true` if expr is a number with imaginary part 1 and real part 0, or a symbol with a definition
 * matching this. Does not bind expr if a symbol.
 *
 * @export
 * @param expr
 * @returns
 */
export declare function isImaginaryUnit(expr: BoxedExpression): boolean;
export declare function getPiTerm(expr: BoxedExpression): [k: NumericValue, t: NumericValue];
export declare function isValidOperatorDef(def: any): def is Partial<OperatorDefinition>;
export declare function isValidValueDef(def: any): def is Partial<ValueDefinition>;
export declare function isValueDef(def: BoxedDefinition | undefined): def is TaggedValueDefinition;
export declare function isOperatorDef(def: BoxedDefinition | undefined): def is TaggedOperatorDefinition;
export declare function updateDef(ce: ComputeEngine, name: string, def: BoxedDefinition, newDef: Partial<OperatorDefinition> | BoxedOperatorDefinition | Partial<ValueDefinition> | BoxedValueDefinition): void;
export declare function placeholderDef(ce: ComputeEngine, name: string): BoxedDefinition;
