/* 0.30.2 */import type { MathJsonSymbol } from '../math-json/types';
import { BoxedExpression, JSSource } from './global-types';
import { chop, factorial, gcd, lcm, limit } from './numerics/numeric';
import { gamma, gammaln } from './numerics/special-functions';
import { interquartileRange, kurtosis, mean, median, mode, populationStandardDeviation, populationVariance, quartiles, skewness, standardDeviation, variance } from './numerics/statistics';
export type CompiledOperators = Record<MathJsonSymbol, [
    op: string,
    prec: number
]>;
export type CompiledFunction = string | ((args: ReadonlyArray<BoxedExpression>, compile: (expr: BoxedExpression) => JSSource, target: CompileTarget) => JSSource);
export type CompiledFunctions = {
    [id: MathJsonSymbol]: CompiledFunction;
};
export type CompileTarget = {
    operators?: (op: MathJsonSymbol) => [op: string, prec: number] | undefined;
    functions?: (id: MathJsonSymbol) => CompiledFunction | undefined;
    var: (id: MathJsonSymbol) => string | undefined;
    string: (str: string) => string;
    number: (n: number) => string;
    ws: (s?: string) => string;
    preamble: string;
    indent: number;
};
/** This is an extension of the Function class that allows us to pass
 * a custom scope for "global" functions. */
export declare class ComputeEngineFunction extends Function {
    SYS: {
        chop: typeof chop;
        factorial: typeof factorial;
        gamma: typeof gamma;
        gcd: typeof gcd;
        integrate: (f: any, a: any, b: any) => number;
        lcm: typeof lcm;
        lngamma: typeof gammaln;
        limit: typeof limit;
        mean: typeof mean;
        median: typeof median;
        variance: typeof variance;
        populationVariance: typeof populationVariance;
        standardDeviation: typeof standardDeviation;
        populationStandardDeviation: typeof populationStandardDeviation;
        kurtosis: typeof kurtosis;
        skewness: typeof skewness;
        mode: typeof mode;
        quartiles: typeof quartiles;
        interquartileRange: typeof interquartileRange;
    };
    constructor(body: string, preamble?: string);
}
export declare class ComputeEngineFunctionLiteral extends Function {
    SYS: {
        chop: typeof chop;
        factorial: typeof factorial;
        gamma: typeof gamma;
        gcd: typeof gcd;
        integrate: (f: any, a: any, b: any) => number;
        lcm: typeof lcm;
        lngamma: typeof gammaln;
        limit: typeof limit;
        mean: typeof mean;
        median: typeof median;
        variance: typeof variance;
        populationVariance: typeof populationVariance;
        standardDeviation: typeof standardDeviation;
        populationStandardDeviation: typeof populationStandardDeviation;
        kurtosis: typeof kurtosis;
        skewness: typeof skewness;
        mode: typeof mode;
        quartiles: typeof quartiles;
        interquartileRange: typeof interquartileRange;
    };
    constructor(body: string, args: string[]);
}
export declare function compileToTarget(expr: BoxedExpression, target: CompileTarget): ((...args: any[]) => any) & {
    isCompiled: true;
};
export declare function compileToJavaScript(expr: BoxedExpression, functions?: Record<MathJsonSymbol, JSSource | Function>, vars?: Record<MathJsonSymbol, JSSource>, imports?: unknown[], preamble?: string): ((...args: any[]) => any) & {
    isCompiled: true;
};
export declare function compile(expr: BoxedExpression | undefined, target: CompileTarget, prec?: number): JSSource;
