/* 0.30.2 */import type { BoxedExpression } from '../global-types';
import type { Rational } from '../numerics/types';
export declare function asRadical(expr: BoxedExpression): Rational | null;
/**
 *
 * Produce the canonical form of the operands of a Power expression, returning either the operation
 * result (e.g. 'a^1 -> a'), an alternate expr. representation ('a^{1/2} -> Sqrt(a)'), or an
 * unchanged 'Power' expression. Operations include:
 *
 * - @todo
 *
 * Both the given base and exponent can either be canonical or non-canonical: with fully
 * canonicalized args. lending to more simplifications.
 *
 * Returns a canonical expr. is both operands are canonical.
 
 * @export
 * @param a
 * @param b
 * @returns
 */
export declare function canonicalPower(a: BoxedExpression, b: BoxedExpression): BoxedExpression;
export declare function canonicalRoot(a: BoxedExpression, b: BoxedExpression | number): BoxedExpression;
/**
 * The power function.
 *
 * It follows the same conventions as SymPy, which do not always
 * conform to IEEE 754 floating point arithmetic.
 *
 * See https://docs.sympy.org/latest/modules/core.html#sympy.core.power.Pow
 *
 */
export declare function pow(x: BoxedExpression, exp: number | BoxedExpression, { numericApproximation }: {
    numericApproximation: boolean;
}): BoxedExpression;
export declare function root(a: BoxedExpression, b: BoxedExpression, { numericApproximation }: {
    numericApproximation: boolean;
}): BoxedExpression;
