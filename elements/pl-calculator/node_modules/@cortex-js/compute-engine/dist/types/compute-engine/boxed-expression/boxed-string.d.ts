/* 0.30.2 */import type { BoxedExpression, PatternMatchOptions, BoxedSubstitution, ComputeEngine, Metadata } from '../global-types';
import { _BoxedExpression } from './abstract-boxed-expression';
import { BoxedType } from '../../common/type/boxed-type';
/**
 * BoxedString
 *
 */
export declare class BoxedString extends _BoxedExpression {
    [Symbol.toStringTag]: string;
    private readonly _string;
    private _utf8Buffer?;
    private _unicodeScalarValues?;
    constructor(ce: ComputeEngine, expr: string, metadata?: Metadata);
    get json(): string;
    get hash(): number;
    get operator(): string;
    get isPure(): boolean;
    get isCanonical(): boolean;
    set isCanonical(_va: boolean);
    get value(): BoxedExpression;
    get type(): BoxedType;
    get complexity(): number;
    get string(): string;
    get buffer(): Uint8Array;
    get unicodeScalars(): number[];
    match(pattern: BoxedExpression, _options?: PatternMatchOptions): BoxedSubstitution | null;
}
